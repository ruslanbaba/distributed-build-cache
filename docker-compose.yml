version: '3.8'

services:
  cache-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - CACHE_SERVER_PORT=8080
      - CACHE_METRICS_PORT=9090
      - CACHE_STORAGE_BUCKET_NAME=test-cache-bucket
      - CACHE_STORAGE_PROJECT_ID=test-project
      - CACHE_PRUNING_MAX_CACHE_SIZE_GB=10
      - CACHE_PRUNING_INTERVAL_HOURS=1
      - CACHE_PRUNING_RETENTION_DAYS=7
      - CACHE_SECURITY_ENABLE_TLS=false
    volumes:
      - ./test-data:/tmp/cache-data
    depends_on:
      - redis
      - memcached
      - jaeger
      - prometheus
    networks:
      - cache-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - cache-network

  memcached:
    image: memcached:1.6-alpine
    ports:
      - "11211:11211"
    command: memcached -m 64
    networks:
      - cache-network

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9091:9090"
    volumes:
      - ./dev/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - cache-network

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      # SECURITY: Use strong password from environment or secret
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-$(openssl rand -base64 32)}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./dev/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./dev/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cache-network

  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - cache-network

  minio:
    image: minio/minio:RELEASE.2023-07-07T07-13-57Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      # SECURITY: Use strong credentials from environment
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-$(openssl rand -base64 32)}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - cache-network

  # Load testing service
  load-test:
    build:
      context: .
      dockerfile: test/load/Dockerfile
    environment:
      - TARGET_HOST=cache-server:8080
      - TEST_DURATION=60s
      - CONCURRENT_USERS=50
    depends_on:
      - cache-server
    networks:
      - cache-network
    profiles:
      - testing

  # Security scanning
  security-scan:
    image: owasp/zap2docker-stable
    command: zap-baseline.py -t http://cache-server:8080
    depends_on:
      - cache-server
    networks:
      - cache-network
    profiles:
      - security

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  minio-data:

networks:
  cache-network:
    driver: bridge
