apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-safe-config
  namespace: distributed-build-cache
  labels:
    app: distributed-build-cache
    component: security
    encryption-level: quantum-safe
data:
  # Post-Quantum Cryptography Configuration
  pqc-enabled: "true"
  pqc-algorithms: "CRYSTALS-Dilithium,CRYSTALS-Kyber,FALCON,SPHINCS+"
  pqc-migration-phase: "hybrid" # hybrid, post-quantum-only
  
  # TLS Configuration with Quantum-Safe Algorithms
  tls-min-version: "1.3"
  tls-cipher-suites: |
    TLS_AES_256_GCM_SHA384
    TLS_CHACHA20_POLY1305_SHA256
    TLS_AES_128_GCM_SHA256
  
  # Digital Signature Algorithms (Quantum-Safe)
  signature-algorithms: |
    - name: "CRYSTALS-Dilithium"
      level: "3"
      key-size: "2420"
      signature-size: "3293"
      security-level: "128-bit"
    - name: "FALCON"
      level: "512"
      key-size: "897"
      signature-size: "690"
      security-level: "103-bit"
    - name: "SPHINCS+"
      variant: "SHA256-128f"
      key-size: "32"
      signature-size: "17088"
      security-level: "128-bit"
  
  # Key Encapsulation Mechanisms (Quantum-Safe)
  kem-algorithms: |
    - name: "CRYSTALS-Kyber"
      level: "3"
      public-key-size: "1184"
      secret-key-size: "2400"
      ciphertext-size: "1088"
      security-level: "128-bit"
    - name: "NTRU"
      parameter-set: "ntruhps2048509"
      public-key-size: "699"
      secret-key-size: "935"
      ciphertext-size: "699"
      security-level: "112-bit"
  
  # Certificate Configuration
  cert-validity-period: "90d" # Shorter validity for quantum-safe era
  cert-renewal-threshold: "30d"
  cert-key-algorithm: "CRYSTALS-Dilithium3"
  
  # Migration Timeline
  migration-phases: |
    phase1:
      name: "Hybrid Mode"
      start: "2024-01-01"
      end: "2025-12-31"
      description: "Classical + Post-Quantum algorithms"
      algorithms: ["RSA-2048", "ECDSA-P256", "CRYSTALS-Dilithium3", "CRYSTALS-Kyber768"]
    
    phase2:
      name: "Post-Quantum Primary"
      start: "2025-01-01"
      end: "2026-12-31"
      description: "Post-Quantum primary, Classical fallback"
      algorithms: ["CRYSTALS-Dilithium3", "CRYSTALS-Kyber768", "FALCON-512"]
    
    phase3:
      name: "Post-Quantum Only"
      start: "2027-01-01"
      end: "2030-12-31"
      description: "Pure Post-Quantum cryptography"
      algorithms: ["CRYSTALS-Dilithium3", "CRYSTALS-Kyber768", "SPHINCS+-SHA256-128f"]

---
apiVersion: v1
kind: Secret
metadata:
  name: quantum-safe-certs
  namespace: distributed-build-cache
  labels:
    app: distributed-build-cache
    component: security
    encryption-level: quantum-safe
type: kubernetes.io/tls
data:
  # These would be generated by the quantum-safe certificate authority
  # Using placeholder values - in production, generate with PQC algorithms
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t # Base64 encoded PQC certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t # Base64 encoded PQC private key
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # Base64 encoded PQC CA certificate

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-safe-proxy
  namespace: distributed-build-cache
  labels:
    app: distributed-build-cache
    component: quantum-safe-proxy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: distributed-build-cache
      component: quantum-safe-proxy
  template:
    metadata:
      labels:
        app: distributed-build-cache
        component: quantum-safe-proxy
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cache-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: quantum-safe-proxy
        image: gcr.io/PROJECT_ID/quantum-safe-proxy:v2.0.0
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: TLS_CERT_FILE
          value: "/etc/certs/tls.crt"
        - name: TLS_KEY_FILE
          value: "/etc/certs/tls.key"
        - name: CA_CERT_FILE
          value: "/etc/certs/ca.crt"
        - name: PQC_ENABLED
          valueFrom:
            configMapKeyRef:
              name: quantum-safe-config
              key: pqc-enabled
        - name: PQC_MIGRATION_PHASE
          valueFrom:
            configMapKeyRef:
              name: quantum-safe-config
              key: pqc-migration-phase
        volumeMounts:
        - name: quantum-safe-certs
          mountPath: /etc/certs
          readOnly: true
        - name: quantum-safe-config
          mountPath: /etc/config
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: quantum-safe-certs
        secret:
          secretName: quantum-safe-certs
          defaultMode: 0400
      - name: quantum-safe-config
        configMap:
          name: quantum-safe-config
      nodeSelector:
        node-type: standard
      tolerations:
      - key: node-type
        operator: Equal
        value: standard
        effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: distributed-build-cache
                  component: quantum-safe-proxy
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: quantum-safe-proxy-service
  namespace: distributed-build-cache
  labels:
    app: distributed-build-cache
    component: quantum-safe-proxy
  annotations:
    cloud.google.com/load-balancer-type: "Internal"
    networking.gke.io/load-balancer-type: "Internal"
spec:
  type: LoadBalancer
  selector:
    app: distributed-build-cache
    component: quantum-safe-proxy
  ports:
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: quantum-safe-routing
  namespace: distributed-build-cache
spec:
  hosts:
  - cache.internal.company.com
  gateways:
  - quantum-safe-gateway
  http:
  - match:
    - uri:
        prefix: /cache/v2
    route:
    - destination:
        host: cache-service
        port:
          number: 8080
    headers:
      request:
        add:
          x-pqc-enabled: "true"
          x-encryption-level: "quantum-safe"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  tls:
  - match:
    - port: 443
      sniHosts:
      - cache.internal.company.com
    route:
    - destination:
        host: quantum-safe-proxy-service
        port:
          number: 443

---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: quantum-safe-gateway
  namespace: distributed-build-cache
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: quantum-safe-certs
      minProtocolVersion: TLSV1_3
      maxProtocolVersion: TLSV1_3
      cipherSuites:
      - TLS_AES_256_GCM_SHA384
      - TLS_CHACHA20_POLY1305_SHA256
    hosts:
    - cache.internal.company.com

---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: quantum-safe-mtls
  namespace: distributed-build-cache
spec:
  selector:
    matchLabels:
      app: distributed-build-cache
  mtls:
    mode: STRICT
  # Custom PQC configuration for mTLS
  portLevelMtls:
    8080:
      mode: STRICT
    8443:
      mode: STRICT

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: quantum-safe-authz
  namespace: distributed-build-cache
spec:
  selector:
    matchLabels:
      app: distributed-build-cache
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/distributed-build-cache/sa/cache-service-account"]
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
    - operation:
        paths: ["/cache/v2/*", "/metrics", "/health", "/ready"]
  when:
  - key: custom.pqc_enabled
    values: ["true"]
  - key: custom.encryption_level
    values: ["quantum-safe"]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-migration-script
  namespace: distributed-build-cache
  labels:
    app: distributed-build-cache
    component: migration
data:
  migrate-to-pqc.sh: |
    #!/bin/bash
    set -euo pipefail
    
    echo "Starting Quantum-Safe Migration..."
    
    # Phase 1: Hybrid Mode Setup
    echo "Phase 1: Setting up Hybrid Classical + Post-Quantum mode"
    
    # Generate PQC certificates
    echo "Generating Post-Quantum certificates..."
    # This would use a PQC-enabled certificate authority
    # openssl-pqc req -new -x509 -days 90 -algorithm dilithium3 -out pqc-cert.pem -keyout pqc-key.pem
    
    # Update TLS configuration
    echo "Updating TLS configuration for PQC support..."
    kubectl patch configmap quantum-safe-config -n distributed-build-cache \
      --patch '{"data":{"pqc-migration-phase":"hybrid"}}'
    
    # Rolling update of services
    echo "Rolling update of cache services..."
    kubectl rollout restart deployment/cache-service -n distributed-build-cache
    kubectl rollout restart deployment/quantum-safe-proxy -n distributed-build-cache
    
    # Verify PQC functionality
    echo "Verifying Post-Quantum cryptography functionality..."
    kubectl exec -n distributed-build-cache deployment/cache-service -- \
      curl -k https://quantum-safe-proxy-service:443/health
    
    echo "Phase 1 migration completed successfully!"
    
    # Phase 2: Post-Quantum Primary (scheduled for future)
    echo "Phase 2 will be triggered automatically on 2025-01-01"
    echo "Phase 3 (PQC-only) will be triggered automatically on 2027-01-01"
    
    echo "Quantum-Safe migration completed!"
  
  verify-pqc.sh: |
    #!/bin/bash
    set -euo pipefail
    
    echo "Verifying Post-Quantum Cryptography implementation..."
    
    # Check certificate algorithm
    echo "Checking certificate algorithms..."
    kubectl get secret quantum-safe-certs -n distributed-build-cache -o jsonpath='{.data.tls\.crt}' | \
      base64 -d | openssl x509 -text -noout | grep -A 5 "Public Key Algorithm"
    
    # Test TLS connection
    echo "Testing TLS connection with PQC support..."
    kubectl exec -n distributed-build-cache deployment/cache-service -- \
      openssl s_client -connect quantum-safe-proxy-service:443 -servername cache.internal.company.com \
      -cipher 'TLS_AES_256_GCM_SHA384' -tls1_3 -brief
    
    # Check metrics
    echo "Checking PQC metrics..."
    kubectl exec -n distributed-build-cache deployment/quantum-safe-proxy -- \
      curl -s http://localhost:9090/metrics | grep pqc_
    
    echo "Post-Quantum Cryptography verification completed!"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: quantum-migration-job
  namespace: distributed-build-cache
  labels:
    app: distributed-build-cache
    component: migration
spec:
  template:
    metadata:
      labels:
        app: distributed-build-cache
        component: migration
    spec:
      serviceAccountName: cache-service-account
      restartPolicy: OnFailure
      containers:
      - name: quantum-migration
        image: gcr.io/PROJECT_ID/quantum-migration:v2.0.0
        command: ["/bin/bash"]
        args: ["/scripts/migrate-to-pqc.sh"]
        env:
        - name: NAMESPACE
          value: "distributed-build-cache"
        - name: MIGRATION_PHASE
          value: "hybrid"
        volumeMounts:
        - name: migration-scripts
          mountPath: /scripts
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: migration-scripts
        configMap:
          name: quantum-migration-script
          defaultMode: 0755
      nodeSelector:
        node-type: standard

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: quantum-safe-metrics
  namespace: distributed-build-cache
  labels:
    app: distributed-build-cache
    component: monitoring
spec:
  selector:
    matchLabels:
      app: distributed-build-cache
      component: quantum-safe-proxy
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
