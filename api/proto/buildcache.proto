// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

syntax = "proto3";

package buildcache;

option go_package = "github.com/ruslanbaba/distributed-build-cache/pkg/grpc/server";

// BuildCacheService provides remote build cache operations
service BuildCacheService {
  // Get retrieves a cached build artifact
  rpc Get(GetRequest) returns (stream GetResponse);
  
  // Put stores a build artifact in the cache
  rpc Put(stream PutRequest) returns (PutResponse);
  
  // Contains checks if an artifact exists in the cache
  rpc Contains(ContainsRequest) returns (ContainsResponse);
  
  // GetActionResult retrieves action execution results
  rpc GetActionResult(GetActionResultRequest) returns (ActionResult);
  
  // UpdateActionResult stores action execution results
  rpc UpdateActionResult(UpdateActionResultRequest) returns (UpdateActionResultResponse);
}

// GetRequest requests a cached artifact
message GetRequest {
  // Digest of the requested artifact
  Digest digest = 1;
  
  // Instance name for multi-tenancy
  string instance_name = 2;
}

// GetResponse streams the cached artifact data
message GetResponse {
  // Chunk of artifact data
  bytes data = 1;
  
  // Digest of the complete artifact
  Digest digest = 2;
}

// PutRequest streams artifact data to be cached
message PutRequest {
  // First message contains metadata
  PutMetadata metadata = 1;
  
  // Subsequent messages contain data chunks
  bytes data = 2;
}

// PutMetadata contains artifact metadata
message PutMetadata {
  // Digest of the artifact
  Digest digest = 1;
  
  // Instance name for multi-tenancy
  string instance_name = 2;
  
  // Content type
  string content_type = 3;
}

// PutResponse confirms successful storage
message PutResponse {
  // Digest of the stored artifact
  Digest digest = 1;
  
  // Size of stored artifact
  int64 size = 2;
}

// ContainsRequest checks for artifact existence
message ContainsRequest {
  // Digests to check
  repeated Digest digests = 1;
  
  // Instance name for multi-tenancy
  string instance_name = 2;
}

// ContainsResponse indicates which artifacts exist
message ContainsResponse {
  // Status for each requested digest
  repeated ContentAddressableStorageStatus results = 1;
}

// ContentAddressableStorageStatus indicates availability
message ContentAddressableStorageStatus {
  // The digest that was checked
  Digest digest = 1;
  
  // Whether the artifact is available
  bool exists = 2;
}

// GetActionResultRequest requests action execution results
message GetActionResultRequest {
  // Action digest
  Digest action_digest = 1;
  
  // Instance name for multi-tenancy
  string instance_name = 2;
}

// UpdateActionResultRequest stores action execution results
message UpdateActionResultRequest {
  // Action digest
  Digest action_digest = 1;
  
  // Action result to store
  ActionResult action_result = 2;
  
  // Instance name for multi-tenancy
  string instance_name = 3;
}

// UpdateActionResultResponse confirms action result storage
message UpdateActionResultResponse {
  // Success indicator
  bool success = 1;
}

// Digest represents a content digest
message Digest {
  // Hash algorithm (e.g., "sha256")
  string hash = 1;
  
  // Size in bytes
  int64 size_bytes = 2;
}

// ActionResult represents the result of action execution
message ActionResult {
  // Output files
  repeated OutputFile output_files = 1;
  
  // Output directories
  repeated OutputDirectory output_directories = 2;
  
  // Exit code
  int32 exit_code = 3;
  
  // Standard output
  bytes stdout_raw = 4;
  
  // Standard error
  bytes stderr_raw = 5;
  
  // Execution metadata
  ExecutedActionMetadata execution_metadata = 6;
}

// OutputFile represents an output file
message OutputFile {
  // Path relative to working directory
  string path = 1;
  
  // File digest
  Digest digest = 2;
  
  // Whether file is executable
  bool is_executable = 3;
}

// OutputDirectory represents an output directory
message OutputDirectory {
  // Path relative to working directory
  string path = 1;
  
  // Tree digest
  Digest tree_digest = 2;
}

// ExecutedActionMetadata contains execution timing information
message ExecutedActionMetadata {
  // Worker that executed the action
  string worker = 1;
  
  // Execution start time
  int64 queued_timestamp = 2;
  
  // Worker start time
  int64 worker_start_timestamp = 3;
  
  // Worker completion time
  int64 worker_completed_timestamp = 4;
  
  // Input fetch start time
  int64 input_fetch_start_timestamp = 5;
  
  // Input fetch completion time
  int64 input_fetch_completed_timestamp = 6;
  
  // Execution start time
  int64 execution_start_timestamp = 7;
  
  // Execution completion time
  int64 execution_completed_timestamp = 8;
  
  // Output upload start time
  int64 output_upload_start_timestamp = 9;
  
  // Output upload completion time
  int64 output_upload_completed_timestamp = 10;
}
