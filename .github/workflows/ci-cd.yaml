name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGISTRY: gcr.io
  IMAGE_NAME: build-cache-server
  GKE_CLUSTER: build-cache-cluster
  GKE_ZONE: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

    - name: Run security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA \
          --build-arg VERSION=$GITHUB_SHA \
          --build-arg COMMIT=$GITHUB_SHA \
          --build-arg DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
          .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Push Docker image
      run: |
        docker push $REGISTRY/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
        docker tag $REGISTRY/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA $REGISTRY/$PROJECT_ID/$IMAGE_NAME:latest
        docker push $REGISTRY/$PROJECT_ID/$IMAGE_NAME:latest

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Deploy to staging
      run: |
        cd k8s/overlays/staging
        kustomize edit set image $REGISTRY/$PROJECT_ID/$IMAGE_NAME=$REGISTRY/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
        kustomize build . | kubectl apply -f -

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/build-cache-server -n build-cache --timeout=600s

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Deploy to production
      run: |
        cd k8s/overlays/production
        kustomize edit set image $REGISTRY/$PROJECT_ID/$IMAGE_NAME=$REGISTRY/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
        kustomize build . | kubectl apply -f -

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/build-cache-server -n build-cache --timeout=600s

    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=busybox --rm -it --restart=Never -- \
          wget -qO- http://build-cache-server.build-cache.svc.cluster.local:9090/metrics

  integration-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Port forward for testing
      run: |
        kubectl port-forward -n build-cache svc/build-cache-server 8080:8080 &
        sleep 10

    - name: Run integration tests
      run: |
        export CACHE_ENDPOINT=localhost:8080
        go test -v -tags=integration ./test/integration/...
